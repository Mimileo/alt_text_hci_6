

<%= form_with(model: alt) do |form| %>
  <% if alt.errors.any? %>
    <div style="color: red">
      <h2><%= pluralize(alt.errors.count, "error") %> prohibited this alt from being saved:</h2>

      <ul>
        <% alt.errors.each do |error| %>
          <li><%= error.full_message %></li>
        <% end %>
      </ul>
    </div>
  <% end %>

  <div class="mb-3">
    <label for="formFile" class="form-label">Image for Seven Army</label>
      <div id="preview" class="container-fluid" style="width:100px;height:100px;">
    </div>
    <%= form.hidden_field :image, value: form.object.cached_image_data %>
    <%= form.file_field :image, class: "btn btn-primary", class: "form-control", type: "file", id: "formFile" %>
  </div>

  <div class="form-floating mb-3">
    <%= form.text_field :title, id: "title", class: "form-control", placeholder: "Title", required: true %>
     <label for="title">Title<span style="color:red"> *</span></label>
  </div>
  <div class="form-floating mb-3">
    <%= form.text_field :tag_list, value: @alt.tag_list.to_s.split(" "), id: "tags", class: "form-control d-block", placeholder: "Tags", required: true %>
     <label for="tags">Tags<span style="color:red"> *</span></label>
  </div>
  <div class="form-floating mb-3">
    <%= form.text_field :original_url, id: "original_url", class: "form-control d-block", placeholder: "original_url" %>
     <label for="original_url">Original URL</label>
  </div>
  <div class="form-floating mb-3">
    <%= form.text_field :original_source, id: "original_source", class: "form-control d-block", placeholder: "original_source"%>
     <label for="original_source">Original Source (e.g. name of person)</label>
  </div>

  <div class="form-field mb-3">
    <%= form.label "Image Alt Text", class: "d-block" %>
    <%= form.text_area :body, class: "form-control", rows: 10 %>
  </div>
  <div class="mb-3 bg-light border rounded border-1 p-3">
    <% if super_admin || referee %>
      <div class="d-block">
        <%= form.label "Verify the ALT TEXT of this image.", style: "display: block" %>
        <%= form.check_box :verified %>
      </div>
    <% end %>
    <% if user_signed_in? %>
       <div class="d-block">
          <%= form.label "Flag the ALT TEXT of this image.", style: "display: block" %>
          <%= form.check_box :flag %>
      </div>
      <%= form.hidden_field :user_id, value: current_user.id %>
    <% end %>
  </div>
  <div>
  <!-- Todo: add Spinner -->
   <%= form.submit "Save", class: "btn btn-primary btn-lg btn-block" %>
   <%= content_tag :div, class: 'alts', data: {alts: Alt.all.map { |u| u.image.data_uri
}} do %>
   <%end%>

  </div>

  <script>
  


    var f;
    var image2;
    var r = new FileReader();
    console.log($('.alts').data('alts')[0]);
    var alt = $('.alts').data('alts')[0]
    //console.log($('.alts').data('alts')[0]);
    var mime_type = "image/jpeg"
  fetch(alt, {
       method: 'GET',
        mode: 'no-cors'
  }).then(res => res.arrayBuffer()) 
  .then(blob => {
   // var url = URL.createObjectURL(blob)
    var fd = new FormData()
  //fd.append('image', blob, 'sample')
    console.log(blob)
    console.log( new Int8Array(blob))
    // f = new File([blob], 'sample.jpeg', {
      type: blob.type,
  //});
   image2 = blob;

  console.log(f);
   
   
   
});
   

      
   
var base64String = "";
$(window).on("load", function() {
  $('#formFile').on('change', function(event) {
    var files = event.target.files;
    var image = files[0]
    var formData = new FormData()
    console.log(image.size);
    var reader = new FileReader();
    reader.onload = function(file) {
      var img = new Image();
      console.log(file);
    
      
      
     
      img.src = file.target.result;
      $('#preview').html(img);
      formData.append('image', image)
      console.log(img.width);

      base64String = reader.result
                //.replace('data:', '')
               // .replace(/^.+,/, '');

      console.log(base64String);

      fetch('https://alt-text-hci-6.herokuapp.com/alts/', {
            method: 'POST',

            body: formData
        })
        .then(resp => resp.json())
        .then(data => {
            if (data.errors) {
              alert(data.errors)
            }
            else {
              console.log(data)
            }
        });
    }

    
    reader.readAsDataURL(image);
     function urlBase64ToUint8Array(base64String) {
        var padding = '='.repeat((4 - base64String.length % 4) % 4);
        var base64 = (base64String + padding)
          .replace(/\-/g, '+')
          .replace(/_/g, '/');

        var d = window.atob(base64);
        var outputArray = new Uint8Array(d.length);

        for (var i = 0; i < d.length; ++i) {
          outputArray[i] = d.charCodeAt(i);
        }
        return outputArray;
      }   

    var img1 = urlBase64ToUint8Array(base64String);
    var img2 = urlBase64ToUint8Array(image2);
   
    pixelmatch(img1.data, img2.data, diff.data, width, height, {threshold: 0.1});


    console.log( pixelmatch(img1.data, img2.data, diff.data, width, height, {threshold: 0.1}));
    console.log(files);

    
  });
});

</script>
<% end %>